// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.17.3
// source: authorization/v1/authorization.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthorizationServiceCheckAuthorization = "/authorization.v1.AuthorizationService/CheckAuthorization"
const OperationAuthorizationServiceCreateApi = "/authorization.v1.AuthorizationService/CreateApi"
const OperationAuthorizationServiceCreateRole = "/authorization.v1.AuthorizationService/CreateRole"
const OperationAuthorizationServiceDeleteApi = "/authorization.v1.AuthorizationService/DeleteApi"
const OperationAuthorizationServiceDeleteRole = "/authorization.v1.AuthorizationService/DeleteRole"
const OperationAuthorizationServiceGetApiList = "/authorization.v1.AuthorizationService/GetApiList"
const OperationAuthorizationServiceGetApiListAll = "/authorization.v1.AuthorizationService/GetApiListAll"
const OperationAuthorizationServiceGetRoleAll = "/authorization.v1.AuthorizationService/GetRoleAll"
const OperationAuthorizationServiceGetRoleList = "/authorization.v1.AuthorizationService/GetRoleList"
const OperationAuthorizationServiceUpdateApi = "/authorization.v1.AuthorizationService/UpdateApi"
const OperationAuthorizationServiceUpdateRole = "/authorization.v1.AuthorizationService/UpdateRole"

type AuthorizationServiceHTTPServer interface {
	CheckAuthorization(context.Context, *CheckAuthorizationReq) (*CheckAuthorizationReply, error)
	// CreateApi Api创建
	CreateApi(context.Context, *CreateApiReq) (*Api, error)
	// CreateRole 角色创建
	CreateRole(context.Context, *CreateRoleReq) (*Role, error)
	// DeleteApi Api删除
	DeleteApi(context.Context, *DeleteApiReq) (*CheckReply, error)
	// DeleteRole 角色删除
	DeleteRole(context.Context, *DeleteRoleReq) (*CheckReply, error)
	// GetApiList Api列表 - 分页
	GetApiList(context.Context, *GetApiListReq) (*GetApiListReply, error)
	// GetApiListAll ================== Api ==================
	// Api列表 - 所有
	GetApiListAll(context.Context, *emptypb.Empty) (*GetApiListAllReply, error)
	// GetRoleAll ================== 角色 ==================
	// 全部角色
	GetRoleAll(context.Context, *emptypb.Empty) (*GetRoleAllReply, error)
	GetRoleList(context.Context, *GetRoleListReq) (*GetRoleListReply, error)
	// UpdateApi Api更新
	UpdateApi(context.Context, *UpdateApiReq) (*CheckReply, error)
	// UpdateRole 角色更新
	UpdateRole(context.Context, *UpdateRoleReq) (*CheckReply, error)
}

func RegisterAuthorizationServiceHTTPServer(s *http.Server, srv AuthorizationServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/auth", _AuthorizationService_CheckAuthorization0_HTTP_Handler(srv))
	r.GET("/apiAll", _AuthorizationService_GetApiListAll0_HTTP_Handler(srv))
	r.GET("/apis", _AuthorizationService_GetApiList0_HTTP_Handler(srv))
	r.POST("/api", _AuthorizationService_CreateApi0_HTTP_Handler(srv))
	r.PUT("/api", _AuthorizationService_UpdateApi0_HTTP_Handler(srv))
	r.DELETE("/api", _AuthorizationService_DeleteApi0_HTTP_Handler(srv))
	r.GET("/roleAll", _AuthorizationService_GetRoleAll0_HTTP_Handler(srv))
	r.GET("/roles", _AuthorizationService_GetRoleList0_HTTP_Handler(srv))
	r.POST("/role", _AuthorizationService_CreateRole0_HTTP_Handler(srv))
	r.PUT("/role", _AuthorizationService_UpdateRole0_HTTP_Handler(srv))
	r.DELETE("/role", _AuthorizationService_DeleteRole0_HTTP_Handler(srv))
}

func _AuthorizationService_CheckAuthorization0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckAuthorizationReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceCheckAuthorization)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckAuthorization(ctx, req.(*CheckAuthorizationReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckAuthorizationReply)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_GetApiListAll0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceGetApiListAll)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetApiListAll(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetApiListAllReply)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_GetApiList0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetApiListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceGetApiList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetApiList(ctx, req.(*GetApiListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetApiListReply)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_CreateApi0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateApiReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceCreateApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateApi(ctx, req.(*CreateApiReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Api)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_UpdateApi0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateApiReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceUpdateApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateApi(ctx, req.(*UpdateApiReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckReply)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_DeleteApi0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteApiReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceDeleteApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteApi(ctx, req.(*DeleteApiReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckReply)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_GetRoleAll0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceGetRoleAll)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoleAll(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleAllReply)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_GetRoleList0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceGetRoleList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoleList(ctx, req.(*GetRoleListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleListReply)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_CreateRole0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceCreateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRole(ctx, req.(*CreateRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Role)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_UpdateRole0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceUpdateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRole(ctx, req.(*UpdateRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckReply)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_DeleteRole0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceDeleteRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckReply)
		return ctx.Result(200, reply)
	}
}

type AuthorizationServiceHTTPClient interface {
	CheckAuthorization(ctx context.Context, req *CheckAuthorizationReq, opts ...http.CallOption) (rsp *CheckAuthorizationReply, err error)
	CreateApi(ctx context.Context, req *CreateApiReq, opts ...http.CallOption) (rsp *Api, err error)
	CreateRole(ctx context.Context, req *CreateRoleReq, opts ...http.CallOption) (rsp *Role, err error)
	DeleteApi(ctx context.Context, req *DeleteApiReq, opts ...http.CallOption) (rsp *CheckReply, err error)
	DeleteRole(ctx context.Context, req *DeleteRoleReq, opts ...http.CallOption) (rsp *CheckReply, err error)
	GetApiList(ctx context.Context, req *GetApiListReq, opts ...http.CallOption) (rsp *GetApiListReply, err error)
	GetApiListAll(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetApiListAllReply, err error)
	GetRoleAll(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetRoleAllReply, err error)
	GetRoleList(ctx context.Context, req *GetRoleListReq, opts ...http.CallOption) (rsp *GetRoleListReply, err error)
	UpdateApi(ctx context.Context, req *UpdateApiReq, opts ...http.CallOption) (rsp *CheckReply, err error)
	UpdateRole(ctx context.Context, req *UpdateRoleReq, opts ...http.CallOption) (rsp *CheckReply, err error)
}

type AuthorizationServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthorizationServiceHTTPClient(client *http.Client) AuthorizationServiceHTTPClient {
	return &AuthorizationServiceHTTPClientImpl{client}
}

func (c *AuthorizationServiceHTTPClientImpl) CheckAuthorization(ctx context.Context, in *CheckAuthorizationReq, opts ...http.CallOption) (*CheckAuthorizationReply, error) {
	var out CheckAuthorizationReply
	pattern := "/auth"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceCheckAuthorization))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) CreateApi(ctx context.Context, in *CreateApiReq, opts ...http.CallOption) (*Api, error) {
	var out Api
	pattern := "/api"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizationServiceCreateApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...http.CallOption) (*Role, error) {
	var out Role
	pattern := "/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizationServiceCreateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) DeleteApi(ctx context.Context, in *DeleteApiReq, opts ...http.CallOption) (*CheckReply, error) {
	var out CheckReply
	pattern := "/api"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceDeleteApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...http.CallOption) (*CheckReply, error) {
	var out CheckReply
	pattern := "/role"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceDeleteRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) GetApiList(ctx context.Context, in *GetApiListReq, opts ...http.CallOption) (*GetApiListReply, error) {
	var out GetApiListReply
	pattern := "/apis"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceGetApiList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) GetApiListAll(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetApiListAllReply, error) {
	var out GetApiListAllReply
	pattern := "/apiAll"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceGetApiListAll))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) GetRoleAll(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetRoleAllReply, error) {
	var out GetRoleAllReply
	pattern := "/roleAll"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceGetRoleAll))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) GetRoleList(ctx context.Context, in *GetRoleListReq, opts ...http.CallOption) (*GetRoleListReply, error) {
	var out GetRoleListReply
	pattern := "/roles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceGetRoleList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) UpdateApi(ctx context.Context, in *UpdateApiReq, opts ...http.CallOption) (*CheckReply, error) {
	var out CheckReply
	pattern := "/api"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizationServiceUpdateApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...http.CallOption) (*CheckReply, error) {
	var out CheckReply
	pattern := "/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizationServiceUpdateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
